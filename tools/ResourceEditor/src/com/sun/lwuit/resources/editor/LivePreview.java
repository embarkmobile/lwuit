/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LivePreview.java
 *
 * Created on Aug 28, 2011, 10:29:25 AM
 */
package com.sun.lwuit.resources.editor;

import com.sun.lwuit.util.EditableResources;
import com.sun.lwuit.util.Resources;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Arrays;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ProgressMonitor;
import javax.swing.SwingUtilities;

/**
 *
 * @author Shai Almog
 */
public class LivePreview extends javax.swing.JDialog {
    private static String previewKey;
    private static ResourceEditorView view;
    private static String themeSelection;
    private static String mainFormSelection = "";
    
    public LivePreview(java.awt.Component c, ResourceEditorView v) {
        this((java.awt.Frame)SwingUtilities.windowForComponent(c), true, v);
    }

    /** Creates new form FindMultiImages */
    public LivePreview(java.awt.Frame parent, boolean modal, ResourceEditorView v) {
        super(parent, modal);
        view = v;
        initComponents();
        
        Resources res =  v.getLoadedResources();
        if(res != null) {
            Vector themeVec = new Vector();
            themeVec.add("[Native Theme]");
            themeVec.addAll(Arrays.asList(res.getThemeResourceNames()));
            themes.setModel(new DefaultComboBoxModel(themeVec));
            if(themeSelection != null && themeVec.contains(themeSelection)) {
                themes.setSelectedItem(themeSelection);
            }
            
            mainForm.setModel(new DefaultComboBoxModel(res.getUIResourceNames()));
            if(Arrays.asList(res.getUIResourceNames()).contains(mainFormSelection)) {
                mainForm.setSelectedItem(mainFormSelection);
            }
        }
        themes.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                if(themes.getSelectedIndex() == 0) {
                    themeSelection = null;
                } else {
                    Resources res =  view.getLoadedResources();
                    themeSelection = res.getThemeResourceNames()[themes.getSelectedIndex() - 1];
                }
                if(previewKey != null) {
                    updateServer(LivePreview.this);
                }
            }
        });
        if(previewKey != null) {
            deviceCode.setText("Preview Device Code: " + previewKey);
        }
        
        mainForm.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                Resources res =  view.getLoadedResources();
                mainFormSelection = res.getUIResourceNames()[mainForm.getSelectedIndex()];
                if(previewKey != null) {
                    updateServer(LivePreview.this);
                }
            }
        });
        
        pack();
        setLocationByPlatform(true);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enableLivePreview = new javax.swing.JCheckBox();
        deviceCode = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        closeDialog = new javax.swing.JButton();
        installClient = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        mainForm = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        themes = new javax.swing.JComboBox();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Live Preview");
        setName("Form"); // NOI18N

        enableLivePreview.setText("Enable Live Preview");
        enableLivePreview.setName("enableLivePreview"); // NOI18N
        enableLivePreview.addActionListener(formListener);

        deviceCode.setText("Preview Device Code: N/A");
        deviceCode.setName("deviceCode"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        closeDialog.setText("Close");
        closeDialog.setName("closeDialog"); // NOI18N
        closeDialog.addActionListener(formListener);
        jPanel2.add(closeDialog);

        installClient.setText("Install Client Software");
        installClient.setName("installClient"); // NOI18N
        jPanel2.add(installClient);

        jPanel1.add(jPanel2);

        jLabel1.setText("Main Form:");
        jLabel1.setName("jLabel1"); // NOI18N

        mainForm.setName("mainForm"); // NOI18N

        jLabel2.setText("Theme");
        jLabel2.setName("jLabel2"); // NOI18N

        themes.setName("themes"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(enableLivePreview)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deviceCode)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(themes, 0, 302, Short.MAX_VALUE)
                            .add(mainForm, 0, 302, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(enableLivePreview)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(themes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(7, 7, 7)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(mainForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deviceCode)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == enableLivePreview) {
                LivePreview.this.enableLivePreviewActionPerformed(evt);
            }
            else if (evt.getSource() == closeDialog) {
                LivePreview.this.closeDialogActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void closeDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeDialogActionPerformed
    dispose();
}//GEN-LAST:event_closeDialogActionPerformed

public static void updateServer(final java.awt.Component parent) {
    if(previewKey == null) {
        return;
    }
    ProgressMonitor pm = new ProgressMonitor(parent, "Enabling Preview", "Preview", 0, 100);
    pm.setMillisToPopup(0);
    new Thread() {
        public void run() {
            try {
                if(view.getLoadedResources() != null) {
                    URL u = new URL("http://lwuitpreview.appspot.com/liveeditpreview/preview");
                    HttpURLConnection con = (HttpURLConnection)u.openConnection();
                    con.setDoOutput(true);
                    con.setDoInput(true);
                    con.setRequestMethod("POST");
                    EditableResources res = view.getLoadedResources();
                    ByteArrayOutputStream bo = new ByteArrayOutputStream();
                    DataOutputStream out = new DataOutputStream(bo);
                    if(previewKey == null) {
                        out.writeUTF("");
                    } else {
                        out.writeUTF(previewKey);
                    }
                    out.writeUTF(mainFormSelection);
                    if(themeSelection == null) {
                        out.writeUTF("");
                    } else {
                        out.writeUTF(themeSelection);                        
                    }
                    view.getLoadedResources().save(out);
                    out.close();

                    OutputStream requestOut = con.getOutputStream();
                    requestOut.write(bo.toByteArray());
                    DataInputStream di = new DataInputStream(con.getInputStream());
                    previewKey = di.readUTF();
                    di.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(parent, "Error: \n" + ex.toString(), "Error Connecting To Server", JOptionPane.ERROR_MESSAGE);
            }
            if(parent instanceof LivePreview && previewKey != null) {
                ((LivePreview)parent).deviceCode.setText("Preview Device Code: " + previewKey);
            }
        }
    }.start();
    
}

private void enableLivePreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableLivePreviewActionPerformed
    if(enableLivePreview.isSelected()) {
        if(previewKey == null) {
            previewKey = "";
            updateServer(this);
        }
    } else {
        previewKey = null;
    }
}//GEN-LAST:event_enableLivePreviewActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeDialog;
    private javax.swing.JLabel deviceCode;
    private javax.swing.JCheckBox enableLivePreview;
    private javax.swing.JButton installClient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox mainForm;
    private javax.swing.JComboBox themes;
    // End of variables declaration//GEN-END:variables
}
